#include<bits/stdc++.h>
#include <iostream>
using namespace std;

/* segment trees 
operations : get(i) and add(l,r,v) 
get(i)   : return a[i]
add(l,r,v) : Adding v to all elements in the range from l to r 
*/

long long int tree[10000001];
int a[10000001];
int n;

void add(int node,int l_n,int h_n,int l_r,int h_r,int v)
{
	if(l_r<=l_n && h_r>=h_n)
	tree[node]+=v;
	else if(h_r<l_n || h_n<l_r)
	return ;
	else
	{
		int mid = l_n + (h_n - l_n)/2;
		add(2*node+1,l_n,mid,l_r,h_r,v);
		add(2*node+2,mid+1,h_n,l_r,h_r,v);
	}
	return;
}

long long int get(int node,int l_n,int h_n,int i)
{
	if(l_n==i && h_n==i)
	return tree[node];
	else if(i<l_n || h_n<i)
	return 0;
	else
	{
		int mid = l_n + (h_n - l_n)/2;
		return (tree[node] + get(2*node+1,l_n,mid,i) + get(2*node+2,mid+1,h_n,i));
	}
}

void build_tree(int node,int l_n,int h_n)
{
   /* assuming padding is done in the main function */
	if(l_n==h_n)
	tree[node]=a[l_n];
	else
	{
		tree[node]=0;
		int mid = l_n + (h_n - l_n)/2;
		build_tree(2*node+1,l_n,mid);
		build_tree(2*node+2,mid+1,h_n);
	}
	return;
}

